import { RouteHotline } from "@/components/molecules/route-manager/route-hotline";
import { db } from "@/lib/db";
import type { Route } from "@/lib/entities/route";
import { geojsonToGpx } from "@/lib/gpx-utils";
import { cn } from "@/lib/utils";
import { LatLngBounds } from "leaflet";
import { Download, Navigation, Trash } from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import type * as React from "react";
import { useMap } from "react-leaflet";
import { toast } from "sonner";

interface RouteItemProps {
	data: Route;
}

export function RouteItem({
	data: {
		geojson,
		stepLength,
		id,
		createdAt,
		minElevation,
		maxElevation,
		distanceInKm,
		coordinates,
		amountOfSteps,
		originLongitude,
		originLatitude,
	},
}: RouteItemProps) {
	const [isShown, setIsShown] = useState(false);
	const map = useMap();

	const onClick = () => {
		setIsShown((prev) => !prev);
		const bbox = geojson.bbox;
		if (!bbox || isShown) return;
		const bounds = new LatLngBounds([
			[bbox[1], bbox[0]],
			[bbox[4] as number, bbox[3]],
		]);
		map.fitBounds(bounds);
	};

	const downloadGpxFile = (e: React.MouseEvent<HTMLButtonElement>) => {
		e.preventDefault();
		e.stopPropagation();
		const filename = `${Math.round(Number(distanceInKm))}_km_walk_${amountOfSteps}_steps_track.gpx`;
		const tackName = filename.replaceAll("_", " ").replace(".gpx", "");
		const gpxData = geojsonToGpx(geojson, {
			creator: "Open Route Service, 10k-steps.itishermann.me",
			version: new Date(createdAt).toISOString(),
			metadata: {
				name: tackName,
				link: {
					href: "https://10k-steps.itishermann.me",
					text: "10k-steps.itishermann.me",
					type: "text/html",
				},
				desc: "This is a directions instructions file as GPX, generated by openrouteservice, for a 10k steps walk.",
			},
		});
		const blob = new Blob([new XMLSerializer().serializeToString(gpxData)], {
			type: "application/gpx+xml",
		});
		const url = URL.createObjectURL(blob);
		const a = document.createElement("a");
		a.href = url;
		a.download = filename;
		a.click();
		URL.revokeObjectURL(url);
	};

	const deleteItem = async (e: React.MouseEvent<HTMLButtonElement>) => {
		e.preventDefault();
		e.stopPropagation();
		const confirmDelete = confirm(
			"Are you sure you want to delete this route?",
		);
		if (!confirmDelete) return;
		const toastId = `delete-route-${id}-toast`;
		try {
			toast.loading("Deleting route...", { id: toastId });
			setIsShown(false);
			await db.route.delete(id);
			toast.success("Route deleted successfully", { id: toastId });
		} catch (error) {
			toast.error("An error occurred", {
				description: (error as Error)?.message ?? "Unknown error",
				duration: 5000,
				id: toastId,
			});
		}
	};

	return (
		<div
			onClick={onClick}
			className={cn(
				"border-t border-b border-input bg-background hover:bg-accent hover:text-accent-foreground relative",
				"h-15 border p-2 grid grid-cols-9 items-center justify-center cursor-pointer",
				isShown && "bg-accent",
			)}
			onKeyDown={(e) => e.key === "Enter" && onClick()}
		>
			<dl className="text-center col-span-2">
				<dd className="font-bold">{distanceInKm.toFixed(2)}</dd>
				<dt className="text-muted-foreground">km</dt>
			</dl>
			<dl className="text-center col-span-2">
				<dd className="font-bold">&asymp;{amountOfSteps}</dd>
				<dt className="text-muted-foreground">steps</dt>
			</dl>
			<dl className="text-center col-span-2">
				<dd className="font-bold">&asymp;{stepLength.toFixed(2)}</dd>
				<dt className="text-muted-foreground">cm/steps</dt>
			</dl>
			<Link
				href={{
					pathname: "/navigator",
					query: { routeId: id },
				}}
			>
				<Navigation className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all col-span-1" />
			</Link>
			<button onClick={downloadGpxFile} className="col-span-1" type="button">
				<Download className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all text-blue-500" />
			</button>
			<button onClick={deleteItem} className="col-span-1" type="button">
				<Trash className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all col-span-1 text-red-500" />
			</button>
			<small className="col-span-9 text-center text-muted-foreground text-[0.65em] bottom-1 right-1 absolute">
				{new Date(createdAt).toLocaleString()}
			</small>
			{isShown && (
				<RouteHotline
					coordinates={coordinates}
					originLongitude={originLongitude}
					originLatitude={originLatitude}
					maxElevation={maxElevation}
					minElevation={minElevation}
				/>
			)}
		</div>
	);
}
